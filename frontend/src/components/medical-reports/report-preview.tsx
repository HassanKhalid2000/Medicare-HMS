'use client';

import { useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { Printer, Download } from 'lucide-react';
import { toast } from 'sonner';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { MedicalReport, getReportTypeLabel, getReportFormatLabel } from '@/services/medical-reports';

interface ReportPreviewProps {
  report: MedicalReport;
}

export function ReportPreview({ report }: ReportPreviewProps) {
  const reportRef = useRef<HTMLDivElement>(null);

  const formatDate = (date: Date | string) => {
    return new Date(date).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    });
  };

  const handlePrint = () => {
    window.print();
  };

  const handleDownloadPDF = () => {
    if (!reportRef.current) return;

    try {
      toast.info('Generating PDF...');

      const pdf = new jsPDF('p', 'mm', 'a4');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 15;
      let yPosition = margin;

      // Header
      pdf.setFontSize(24);
      pdf.setFont('helvetica', 'bold');
      pdf.text('MEDICORE HMS', margin, yPosition);
      yPosition += 8;

      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text('Hospital Management System', margin, yPosition);
      yPosition += 15;

      // Report Info (Right side)
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text('MEDICAL REPORT', pageWidth - margin - 50, margin);

      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Type: ${getReportTypeLabel(report.type)}`, pageWidth - margin - 70, margin + 10);
      pdf.text(`Generated: ${formatDate(report.createdAt)}`, pageWidth - margin - 70, margin + 16);

      // Report Title
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text(report.title, margin, yPosition);
      yPosition += 10;

      // Description
      if (report.description) {
        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');
        const descLines = pdf.splitTextToSize(report.description, pageWidth - 2 * margin);
        pdf.text(descLines, margin, yPosition);
        yPosition += descLines.length * 5 + 10;
      }

      // Filters Section
      if (report.filters && Object.keys(report.filters).length > 0) {
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Report Filters:', margin, yPosition);
        yPosition += 7;

        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');

        if (report.filters.startDate) {
          pdf.text(`Start Date: ${formatDate(report.filters.startDate)}`, margin + 5, yPosition);
          yPosition += 5;
        }

        if (report.filters.endDate) {
          pdf.text(`End Date: ${formatDate(report.filters.endDate)}`, margin + 5, yPosition);
          yPosition += 5;
        }

        if (report.filters.patientId) {
          pdf.text(`Patient ID: ${report.filters.patientId}`, margin + 5, yPosition);
          yPosition += 5;
        }

        if (report.filters.doctorId) {
          pdf.text(`Doctor ID: ${report.filters.doctorId}`, margin + 5, yPosition);
          yPosition += 5;
        }

        yPosition += 10;
      }

      // Parameters Section
      if (report.parameters && Object.keys(report.parameters).length > 0) {
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Report Parameters:', margin, yPosition);
        yPosition += 7;

        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');

        Object.entries(report.parameters).forEach(([key, value]) => {
          const text = `${key}: ${value}`;
          pdf.text(text, margin + 5, yPosition);
          yPosition += 5;
        });

        yPosition += 10;
      }

      // Generated By
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'italic');
      if (report.requestedByUser) {
        pdf.text(`Requested by: ${report.requestedByUser.fullName}`, margin, yPosition);
        yPosition += 5;
      }

      // Footer
      yPosition = pageHeight - 20;
      pdf.setFontSize(9);
      pdf.setFont('helvetica', 'normal');
      pdf.text('Generated by MediCore Hospital Management System', pageWidth / 2, yPosition, { align: 'center' });

      // Save PDF
      const fileName = `${report.type}_${new Date().toISOString().split('T')[0]}.pdf`;
      pdf.save(fileName);
      toast.success('PDF downloaded successfully');
    } catch (error) {
      console.error('Error generating PDF:', error);
      toast.error('Failed to generate PDF');
    }
  };

  return (
    <div className="max-w-4xl mx-auto">
      {/* Actions */}
      <div className="flex justify-end gap-2 mb-6 print:hidden">
        <Button variant="outline" onClick={handlePrint}>
          <Printer className="w-4 h-4 mr-2" />
          Print
        </Button>
        <Button variant="outline" onClick={handleDownloadPDF}>
          <Download className="w-4 h-4 mr-2" />
          Download PDF
        </Button>
      </div>

      {/* Report */}
      <div
        ref={reportRef}
        className="bg-white print:shadow-none shadow-lg"
        style={{ backgroundColor: '#ffffff', color: '#000000' }}
      >
        {/* Header */}
        <div className="p-8 border-b">
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-3xl font-bold text-primary">MEDICORE HMS</h1>
              <p className="text-muted-foreground mt-2">Hospital Management System</p>
              <div className="mt-4 text-sm">
                <p>123 Healthcare Avenue</p>
                <p>Medical City, MC 12345</p>
                <p>Phone: (555) 123-4567</p>
                <p>Email: reports@medicore.com</p>
              </div>
            </div>
            <div className="text-right">
              <h2 className="text-2xl font-bold">MEDICAL REPORT</h2>
              <div className="mt-4 text-sm">
                <p><strong>Type:</strong> {getReportTypeLabel(report.type)}</p>
                <p><strong>Format:</strong> {getReportFormatLabel(report.format)}</p>
                <p><strong>Generated:</strong> {formatDate(report.createdAt)}</p>
                <div className="mt-2">
                  <Badge className="bg-green-100 text-green-800">
                    {report.status}
                  </Badge>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Report Content */}
        <div className="p-8 border-b">
          <h3 className="text-2xl font-bold mb-4">{report.title}</h3>
          {report.description && (
            <p className="text-muted-foreground mb-6">{report.description}</p>
          )}

          {/* Filters */}
          {report.filters && Object.keys(report.filters).length > 0 && (
            <div className="mb-6">
              <h4 className="font-semibold mb-3">Report Filters:</h4>
              <div className="grid grid-cols-2 gap-4 text-sm bg-muted/30 p-4 rounded-md">
                {report.filters.startDate && (
                  <div>
                    <span className="font-medium">Start Date:</span> {formatDate(report.filters.startDate)}
                  </div>
                )}
                {report.filters.endDate && (
                  <div>
                    <span className="font-medium">End Date:</span> {formatDate(report.filters.endDate)}
                  </div>
                )}
                {report.filters.patientId && (
                  <div>
                    <span className="font-medium">Patient ID:</span> {report.filters.patientId}
                  </div>
                )}
                {report.filters.doctorId && (
                  <div>
                    <span className="font-medium">Doctor ID:</span> {report.filters.doctorId}
                  </div>
                )}
                {report.filters.departmentId && (
                  <div>
                    <span className="font-medium">Department ID:</span> {report.filters.departmentId}
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Parameters */}
          {report.parameters && Object.keys(report.parameters).length > 0 && (
            <div className="mb-6">
              <h4 className="font-semibold mb-3">Report Parameters:</h4>
              <div className="grid grid-cols-2 gap-4 text-sm bg-muted/30 p-4 rounded-md">
                {Object.entries(report.parameters).forEach(([key, value]) => (
                  <div key={key}>
                    <span className="font-medium">{key}:</span> {String(value)}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Report Metadata */}
        <div className="p-8 border-t">
          <h4 className="font-semibold mb-3">Report Information:</h4>
          <div className="grid grid-cols-2 gap-4 text-sm">
            {report.requestedByUser && (
              <div>
                <p className="text-muted-foreground">Requested By:</p>
                <p className="font-medium">{report.requestedByUser.fullName}</p>
                <p className="text-xs text-muted-foreground">{report.requestedByUser.email}</p>
              </div>
            )}
            {report.generatedByUser && (
              <div>
                <p className="text-muted-foreground">Generated By:</p>
                <p className="font-medium">{report.generatedByUser.fullName}</p>
                <p className="text-xs text-muted-foreground">{report.generatedByUser.email}</p>
              </div>
            )}
            <div>
              <p className="text-muted-foreground">Generated At:</p>
              <p className="font-medium">{formatDate(report.createdAt)}</p>
            </div>
            {report.expiresAt && (
              <div>
                <p className="text-muted-foreground">Expires At:</p>
                <p className="font-medium">{formatDate(report.expiresAt)}</p>
              </div>
            )}
          </div>
        </div>

        {/* Footer */}
        <div className="p-8 border-t bg-muted/20 text-center text-sm text-muted-foreground">
          <p>Generated by MediCore Hospital Management System</p>
          <p className="mt-2">
            This is a system-generated report. For questions, please contact the reporting department.
          </p>
        </div>
      </div>
    </div>
  );
}
